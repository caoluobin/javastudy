命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。
命令接受者stock:存放一系列不同的请求并执行
具体命令order:执行相应stock的命令
命令发送（调用）者Braker:存放命令order并执行
braker发送命令order给stock执行

命令模式的主要优点如下。
1.通过引入中间件（抽象接口）降低系统的耦合度。
2.扩展性良好，增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，且满足“开闭原则”。
3.可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令。
4.方便实现 Undo 和 Redo 操作。命令模式可以与后面介绍的备忘录模式结合，实现命令的撤销与恢复。
5.可以在现有命令的基础上，增加额外功能。比如日志记录，结合装饰器模式会更加灵活。
其缺点是：
1.可能产生大量具体的命令类。因为每一个具体操作都需要设计一个具体命令类，这会增加系统的复杂性。
2.命令模式的结果其实就是接收方的执行结果，但是为了以命令的形式进行架构、解耦请求与实现，
  引入了额外类型结构（引入了请求方与抽象命令接口），增加了理解上的困难。
  不过这也是设计模式的通病，抽象必然会额外增加类的数量，代码抽离肯定比代码聚合更加难理解。


