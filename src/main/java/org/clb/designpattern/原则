里氏替换原则（Liskov Substitution Principle，LSP）
1.子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法
2.子类中可以增加自己特有的方法
3.当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松
4.当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的的输出/返回值）
要比父类的方法更严格或相等

依赖倒置原则（Dependence Inversion Principle，DIP）
1.每个类尽量提供接口或抽象类，或者两者都具备。
2.变量的声明类型尽量是接口或者是抽象类。例：(Shop shop) 定义接口类Shop而不应该具体的哪家Shop
3.任何类都不应该从具体类派生。
4.使用继承时尽量遵循里氏替换原则。

单一职责原则（Single Responsibility Principle，SRP）
该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：
1.一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力；
2.当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费。

优点：
降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。
提高类的可读性。复杂性降低，自然其可读性会提高。
提高系统的可维护性。可读性提高，那自然更容易维护了。
变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。

接口隔离原则（Interface Segregation Principle，ISP）
接口隔离原则的优点
接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点。
将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。
接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。
如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。
使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。
能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。

在具体应用接口隔离原则时，应该根据以下几个规则来衡量。
1.接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。
2.为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。
3.了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。
4.提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。

迪米特法则（Law of Demeter，LoD）


