package org.clb.structure.binary_tree.complete_binary_tree.heap;

/**
 * @Description 给定一个整数数组arr和一个布尔类型数组op 两个数组长度都为N
 * arr表示客户编号，op表示客户操作:T 买货 F:卖货
 * 要在每个事件到来的发生后都需要获得一个得奖名单（得奖区:给购买次数最多的前K名用户颁奖）
 * 如果客户购买商品数为0又发生了退货事件，则认为改事件无效
 * 每次都是最多K个用户得奖，K为传入参数， 如果不足K个则输出实际个数
 * 得奖系统分为得奖区和候选区，任何用户职员号购买数>0 一定在这两个区域中的一个
 * 购买数最大的前K名用户进入得奖区，在最初时如果得奖区没有达到K个用户，那么新来的用户直接进入得奖区
 * 7.如果购买数不足以进入得奖区的用户  进入候选区
 * 如果候选区购买数最多的用户，已经足以进入得奖区，
 * 该用户就会替换得奖区中购买数最少的用户(大于才能替换)，
 * 如果得奖区中购买数最少的用户有多个，就替换最早进入得奖区的用户如果候选区中购买数最多的用户有多个，机会会给最早进入候选区的用户
 * 8.候选区和得奖区是两套时间，
 * 因用户只会在其中一个区域，所以只会有一个区域的时间，另一个没有从得奖区出来进入候选区的用户，得奖区时间删除，
 * 进入候选区的时间就是当前事件的时间（可以理解为arr[i]和op[i]中的i)从候选区出来进入得奖区的用户，候选区时间删除，
 * 进入得奖区的时间就是当前事件的时间(可以理解为arr[i]和op间中的i)
 * 9.如果某用户购买数==0，不管在哪个区域都离开，区域时间删除，离开是指彻底离开，哪个区域也不会找到该用户
 * 如果下次该用户又发生购买行为，产生>0的购买数，
 * 会再次根据之前规则回到某个区域中，进入区域的时间重记
 *
 * 使用两个自己写的加强堆 dejiangHeap houxuanHeap
 * @Classname HeapCode04
 * @Date 2021/5/23 21:35
 * @Author clb
 */
public class HeapCode04 {


}
